import { balanced } from "./index";
describe("balanced", () => {
  test("Let's get things started", () => {
    expect(balanced).toBeDefined();
  });
  test("random characters should return false", () => {
    const result = balanced("Aa");
    expect(result).toBe(false);
  });
  test("{} should return true", () => {
    const result = balanced("{}");
    expect(result).toBe(true);
  });
  test("{ should return false", () => {
    const result = balanced("{");
    expect(result).toBe(false);
  });

  test("}} should return false", () => {
    const result = balanced("{[}]");
    expect(result).toBe(false);
  });
});

test("failing test 1", () => {
  const bigInput = [
    "{}",
    "[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]",
    "[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}",
    "(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]",
    "){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]",
    "}(]}){",
    "((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(",
    "{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())",
    "(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]",
    "()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])",
    "[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][",
    "{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}",
    "()(){{}}[()()]{}{}",
    "{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])",
    "{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})",
    "][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{",
    "{{}(",
    "{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}",
    "()[[][()[]][]()](([[[(){()[[]](([]))}]]]))",
    "()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))",
    "}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][",
    "[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)",
    ")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]",
    "[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]",
    "({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]",
    "([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]",
    "[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})",
    "(]{()}((",
    "[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]",
    "}[})})}[)]{}{)",
    "({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}",
    "]}})[]))]{][])[}(])]({[]}[]([)",
    "[{{}{[{{[}[[}([]",
    "[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]",
    "]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}",
    "{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][",
    "(]{}{(}}}[)[",
    "[]{}{[[]]}([{}]{}[]){{(())}}",
    "[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]",
    "{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]",
    ")}][(})){))[{}[}",
    "{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]",
    "()()()[]",
    "((){}])][]][}{]{)]]}][{]}[)(])[}[({(",
    ")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(",
    "}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}",
    "([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])",
    "[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]",
    "{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[",
    "{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]",
    "{[{}[][]]}[((()))][]({})[]{}{()}",
    "(){[{({})}]}",
    "([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[",
    "((({{}(([{}(())]))[()]{[[[]()]]}})))",
    "}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(",
    "{}{}{}{[[()]][]}",
    ")]}]({{})[[[{]{{{}}][))]{{",
    "))){({}])}])}}]{)()(}(]}([",
    "([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))",
    "(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[",
    "([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}",
    "[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}",
    "}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}",
    "[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}",
    "{{(([{)]{}({][{](){({([[[][)}[)})(",
    "[{}]{[()({[{}]})]}",
    "[[{}]]",
    "]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}",
    "{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}",
    "]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}",
    "(]}[{}{{][}))){{{([)([[])([]{[",
    "{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()",
    "{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))",
    "{[][]}[{}[](){}]{{}{[][{}]}}",
    "()(){}(){((){}[])([[]]())}",
    "{}[[{[((}[(}[[]{{]([(}]][[",
    "{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]",
    "{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{",
    "[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]",
    "((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}",
  ];
  const expectedResponses = [
    true,
    true,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    false,
    true,
    true,
    true,
    true,
    false,
    false,
    true,
    true,
    true,
    false,
    false,
    false,
    true,
    true,
    true,
    true,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    false,
    true,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    true,
    true,
    false,
    true,
    true,
    true,
    false,
    true,
    false,
    true,
    false,
    false,
    true,
    false,
    true,
    true,
    false,
    true,
    false,
    true,
    true,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    true,
    false,
    true,
    false,
    true,
  ];
  const m = {} as any;
  for (let i in bigInput) {
    const input = bigInput[i];
    const result = balanced(input);
    if (result !== expectedResponses[i]) {
      console.log({ input, result });
    }
    expect(result).toBe(expectedResponses[i]);
  }
});
test("[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]", () => {
  const input =
    "[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]";
  expect(balanced(input)).toBe(true);
});
